// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Models;

#nullable disable

namespace WebApp.Migrations.WebApp
{
    [DbContext(typeof(WebAppContext))]
    [Migration("20241113103335_RemoveOtherEvaluationFromUserRequirements")]
    partial class RemoveOtherEvaluationFromUserRequirements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApp.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Postcode")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("T_Users", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanieName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Siret")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_T_Companies");

                    b.ToTable("T_Companies", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TExerce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("PosteId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TypeOfContractId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_T_Exerces");

                    b.HasIndex("PosteId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TypeOfContractId");

                    b.HasIndex("UserId");

                    b.ToTable("T_Exerces", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TJobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanieId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PosteId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TypeOfContractId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_T_JobPosts");

                    b.HasIndex("CompanieId");

                    b.HasIndex("PosteId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TypeOfContractId");

                    b.ToTable("T_JobPosts", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TJobPostRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<int?>("JobPostId")
                        .HasColumnType("int");

                    b.Property<int?>("RequirementTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_T_JobPostRequirements");

                    b.HasIndex("JobPostId");

                    b.HasIndex("RequirementTypeId");

                    b.ToTable("T_JobPostRequirements", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TPoste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ResponsabilityRank")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_T_Postes");

                    b.ToTable("T_Postes", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TRequirementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_T_RequirementTypes");

                    b.ToTable("T_RequirementTypes", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CompanieId")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("Postcode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_T_Sites");

                    b.HasIndex("CompanieId");

                    b.ToTable("T_Sites", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TTypeOfContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_T_TypeOfContracts");

                    b.ToTable("T_TypeOfContracts", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TUserRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OtherEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("PersonnalEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("RequirementTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_T_UserRequirements");

                    b.HasIndex("RequirementTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("T_UserRequirements", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.UserCompanieAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_UserCompanieAssociations");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCompanieAssociations");
                });

            modelBuilder.Entity("WebApp.Models.TExerce", b =>
                {
                    b.HasOne("WebApp.Models.TPoste", "Poste")
                        .WithMany("TExerces")
                        .HasForeignKey("PosteId")
                        .HasConstraintName("FK_T_Exerces_PosteId");

                    b.HasOne("WebApp.Models.TSite", "Site")
                        .WithMany("TExerces")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_T_Exerces_SiteId");

                    b.HasOne("WebApp.Models.TTypeOfContract", "TypeOfContract")
                        .WithMany("TExerces")
                        .HasForeignKey("TypeOfContractId")
                        .HasConstraintName("FK_Exerces_TypeOfContracts");

                    b.HasOne("WebApp.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("TExerces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_T_Exerces_T_Users");

                    b.Navigation("Poste");

                    b.Navigation("Site");

                    b.Navigation("TypeOfContract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Models.TJobPost", b =>
                {
                    b.HasOne("WebApp.Models.TCompany", "Companie")
                        .WithMany("TJobPosts")
                        .HasForeignKey("CompanieId")
                        .HasConstraintName("FK_T_JobPost_CompanieId");

                    b.HasOne("WebApp.Models.TPoste", "Poste")
                        .WithMany("TJobPosts")
                        .HasForeignKey("PosteId")
                        .HasConstraintName("FK_T_JobPost_PosteId");

                    b.HasOne("WebApp.Models.TSite", "Site")
                        .WithMany("TJobPosts")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_T_JobPost_SiteId");

                    b.HasOne("WebApp.Models.TTypeOfContract", "TypeOfContract")
                        .WithMany("TJobPosts")
                        .HasForeignKey("TypeOfContractId")
                        .HasConstraintName("FK_JobPosts_TypeOfContracts");

                    b.Navigation("Companie");

                    b.Navigation("Poste");

                    b.Navigation("Site");

                    b.Navigation("TypeOfContract");
                });

            modelBuilder.Entity("WebApp.Models.TJobPostRequirement", b =>
                {
                    b.HasOne("WebApp.Models.TJobPost", "JobPost")
                        .WithMany("TJobPostRequirements")
                        .HasForeignKey("JobPostId")
                        .HasConstraintName("FK_T_JobPostRequirement_JobPostId");

                    b.HasOne("WebApp.Models.TRequirementType", "RequirementType")
                        .WithMany("TJobPostRequirements")
                        .HasForeignKey("RequirementTypeId")
                        .HasConstraintName("FK_T_JobPostRequirement_RequirementTypeId");

                    b.Navigation("JobPost");

                    b.Navigation("RequirementType");
                });

            modelBuilder.Entity("WebApp.Models.TSite", b =>
                {
                    b.HasOne("WebApp.Models.TCompany", "Companie")
                        .WithMany("TSites")
                        .HasForeignKey("CompanieId")
                        .HasConstraintName("FK_T_Sites_CompanieId");

                    b.Navigation("Companie");
                });

            modelBuilder.Entity("WebApp.Models.TUserRequirement", b =>
                {
                    b.HasOne("WebApp.Models.TRequirementType", "RequirementType")
                        .WithMany("TUserRequirements")
                        .HasForeignKey("RequirementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_T_UserRequirement_RequirementTypeId");

                    b.HasOne("WebApp.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("TUserRequirements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_T_UserRequirements_Users");

                    b.Navigation("RequirementType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Models.UserCompanieAssociation", b =>
                {
                    b.HasOne("WebApp.Models.TCompany", "Company")
                        .WithMany("UserCompanieAssociations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserCompanieAssociations_Companies");

                    b.HasOne("WebApp.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("UserCompanieAssociations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserCompanieAssociations_Users");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("TExerces");

                    b.Navigation("TUserRequirements");

                    b.Navigation("UserCompanieAssociations");
                });

            modelBuilder.Entity("WebApp.Models.TCompany", b =>
                {
                    b.Navigation("TJobPosts");

                    b.Navigation("TSites");

                    b.Navigation("UserCompanieAssociations");
                });

            modelBuilder.Entity("WebApp.Models.TJobPost", b =>
                {
                    b.Navigation("TJobPostRequirements");
                });

            modelBuilder.Entity("WebApp.Models.TPoste", b =>
                {
                    b.Navigation("TExerces");

                    b.Navigation("TJobPosts");
                });

            modelBuilder.Entity("WebApp.Models.TRequirementType", b =>
                {
                    b.Navigation("TJobPostRequirements");

                    b.Navigation("TUserRequirements");
                });

            modelBuilder.Entity("WebApp.Models.TSite", b =>
                {
                    b.Navigation("TExerces");

                    b.Navigation("TJobPosts");
                });

            modelBuilder.Entity("WebApp.Models.TTypeOfContract", b =>
                {
                    b.Navigation("TExerces");

                    b.Navigation("TJobPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
